result_df <- NULL
#Searching in selected databases
for (db in names(databases)) {
if (databases[[db]]) {
op_df <- NULL  # Initialize an empty data frame for the current database
switch(db,
"GWASdb" = {
op_df <- setDT(GWASdb_GRCh38)[setDT(variant_data), on = .(Position = V2, Chr = V1)][P_value < p_value, .(Rsid, Chr, Position, V4, V5, Ref, Alt, P_value, Gwas_trait, Gene, Variant_type, V6, V7, V8, Pubmedid)]
op_df$DB <- "GWASdb"
},
"GRASP" = {
op_df <- setDT(GRASP_GRCh38)[setDT(variant_data), on = .(Position = V2, Chr = V1)][P_value < p_value, .(Rsid, Chr, Position, V4, V5, Ref, Alt, P_value, Gwas_trait, Gene, Variant_type, V6, V7, V8, Pubmedid)]
op_df$DB <- "GRASP"
},
"GWASCat" = {
op_df <- setDT(GWAS_catalog_GRCh38)[setDT(variant_data), on = .(Position = V2, Chr = V1)][P_value < p_value, .(Rsid, Chr, Position, V4, V5, Ref, Alt, P_value, Gwas_trait, Gene, Variant_type, V6, V7, V8, Pubmedid)]
op_df$DB <- "GWAS Catalog"
},
"GAD" = {
GAD_GRCh38$P_value <- 0
op_df <- setDT(GAD_GRCh38)[setDT(variant_data), on = .(Position = V2, Chr = V1)][P_value < p_value, .(Rsid , Chr , Position, V4, V5, Ref, Alt, P_value, Gwas_trait , Gene , Variant_type, V6, V7, V8, Pubmedid)]
op_df$P_value <- NA
op_df$DB <- "GADCDC"
},
"JohnO" = {
op_df <- setDT(JnO_GRCh38)[setDT(variant_data), on = .(Position = V2, Chr = V1)][P_value < p_value, .(Rsid, Chr, Position, V4, V5, Ref, Alt, P_value, Gwas_trait, Gene, Variant_type, V6, V7, V8, Pubmedid)]
op_df$DB <- "Johnson and O'Donnell"
},
"ClinVar" = {
ClinVar_GRCh38$P_value <- 0
op_df <- setDT(ClinVar_GRCh38)[setDT(variant_data), on = .(Position = V2, Chr = V1)][P_value < p_value, .(Rsid, Chr, Position, V4, V5, Ref, Alt, P_value, Gwas_trait, Gene, Variant_type, V6, V7, V8)]
op_df$P_value <- NA
op_df$DB <- "ClinVar"
}
)
# If the result from the current database is not empty, combine it with the previous results
if (nrow(op_df) > 0) {
if (is.null(result_df)) {
result_df <- op_df
} else {
result_df <- rbind(result_df, op_df, fill = TRUE)
}
}
}
}
rm(variant_data, databases, op_df,GWASdb_GRCh38, GRASP_GRCh38,ClinVar_GRCh38, GWAS_catalog_GRCh38, GAD_GRCh38, JnO_GRCh38)
cat("Searching...DONE\n")
cat("Processing results...\n")
# If no variant is found, Exit program
if (is.null(result_df) || nrow(result_df) == 0) {
stop("No variant was found in the selected databases")
# EXIT command
}
result_df$`Allele Sample` <- paste(result_df$V4, result_df$V5, sep = ">")
result_df$`Allele DB` <- paste(result_df$Ref, result_df$Alt, sep = ">")
# If merge_result = TRUE, perform merge before formatting
if (merge_result) {
result_df <- result_df[, lapply(.SD, function(x) paste(x, collapse = ";")),
by = .(Gwas_trait, Chr, Position),
.SDcols = setdiff(names(result_df), c("Gwas_trait", "Chr", "Position"))]
}
# Initialize the align_df data frame with column names
align_df <- data.frame(matrix(ncol = 14, nrow = nrow(result_df)))
colnames(align_df) <- c("Disease", "DB", "Gene", "Variant Type", "Chrom", "Position", "Variant ID", "Allele Sample", "Allele DB", "Confident", "Qual", "Filter", "Pubmed ID", "Info")
align_df$Disease <- result_df$Gwas_trait
align_df$Chrom <- result_df$Chr
align_df$Position <- result_df$Position
align_df$Gene <- result_df$Gene
align_df$`Variant ID` <- result_df$Rsid
align_df$`Variant Type` <- result_df$Variant_type
align_df$`Allele Sample` <- result_df$`Allele Sample`
align_df$`Allele DB` <- result_df$`Allele DB`
align_df$Confident <- result_df$P_value
align_df$DB <- result_df$DB
align_df$Qual <- result_df$V6
align_df$Filter <- result_df$V7
align_df$`Pubmed ID` <- result_df$Pubmedid
align_df$Info <- result_df$V8
aligned_df <- align_df %>% arrange(Disease, Confident)
colnames(aligned_df)[10] <- "P-value"
cat("Processing results...DONE\n")
# Statistical output
total_variants <- nrow(align_df)
database_counts <- table(align_df$DB)
cat("\nStatistical Summary\n")
cat("Total Variants Found:", total_variants, "\n")
cat("Variants per Database:\n")
print(database_counts)
# Plotting
if (nrow(align_df) > 0) {
# Variants per database plot
print(ggplot(align_df, aes(x = DB, fill = DB)) +
geom_bar(alpha = 0.8, color = "black") +
labs(title = "Number of Variants per Database", x = "Database", y = "Count (Hits)") +
scale_fill_manual(values = wes_palette("Zissou1", n = count_true, type = "continuous")) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
)}
# Top 10 diseases or traits plot
top_diseases <- align_df %>%
group_by(Disease) %>%
tally(sort = TRUE) %>%
slice_head(n = 10)
if (nrow(top_diseases) > 0) {
print(ggplot(top_diseases, aes(x = reorder(Disease, n), y = n, fill = Disease)) +
geom_bar(stat = "identity", alpha = 0.8, color = "black") +
labs(title = "Top 10 Diseases or Traits", x = "Disease/Trait", y = "Count (Hits)") +
coord_flip() +
scale_fill_manual(values = wes_palette("Darjeeling1", n = nrow(top_diseases), type = "continuous")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
)
}
# If not running on Shiny, generate the result file
if (!runOnShiny) {
cat("Generating result file...\n")
output_file <- sub(".vcf", "_DisVar.tsv", file)
write.table(aligned_df, file = output_file, quote = FALSE, sep = '\t', row.names = FALSE)
cat("Generating result file...DONE\n")
cat("The output file is saved as:", output_file, "in the directory:", getwd(), "\n")
}
if (merge_result) {
if (is.null(output_path)) {
output_path <- "merge_result.csv"
}
write.csv(merge_result, file = output_path, row.names = FALSE)
message(sprintf("Merged results saved to %s", output_path))
}
# Clear unused variables
rm(result_df, align_df, count_true)
return(aligned_df)
}
' GAD_GRCh38 Dataset
#'
#' This dataset contains GWAS information from the GAD database.
#'
#' @name GAD_GRCh38
#' @format A data frame with columns: Rsid, Gene, Gwas_trait, Disease_class, PubmedID, Chr, Position, Ref, Alt, P_value, Variant_type
#' @docType data
data("GAD_GRCh38", envir = environment())
#' GRASP_GRCh38 Dataset (Split)
#'
#' This dataset contains GWAS information from the GRASP database.
#' It is split into four parts (`GRASP_GRCh38_part1` to `GRASP_GRCh38_part4`) and merged internally before use.
#'
#' @name GRASP_GRCh38
#' @format A data frame with columns: Rsid, Chr_37, Position_37, P_value, Pubmedid, Gwas_trait, Phenotype_description, Chr, Position, Gene, Ref, Alt, Variant_type
#' @docType data
data("GRASP_GRCh38_part1", envir = environment())
data("GRASP_GRCh38_part2", envir = environment())
data("GRASP_GRCh38_part3", envir = environment())
data("GRASP_GRCh38_part4", envir = environment())
#' GWAS_catalog_GRCh38 Dataset
#'
#' This dataset contains GWAS information from the GWAS Catalog.
#'
#' @name GWAS_catalog_GRCh38
#' @format A data frame with columns: Rsid, Chr_37, Position_37, Gwas_trait, Gene, Variant_type, P_value, Pubmedid, Chr, Position, Ref, Alt
#' @docType data
data("GWAS_catalog_GRCh38", envir = environment())
#' GWASdb_GRCh38 Dataset
#'
#' This dataset contains GWAS information from the GWASdb database.
#'
#' @name GWASdb_GRCh38
#' @format A data frame with columns: Rsid, Chr_37, Position_37, Ref, Alt, P_value, Gwas_trait, Gene, Variant_type, Pubmedid, Chr, Position
#' @docType data
data("GWASdb_GRCh38", envir = environment())
#' JnO_GRCh38 Dataset
#'
#' This dataset contains GWAS information from the Johnson and O'Donnell database.
#'
#' @name JnO_GRCh38
#' @format A data frame with columns: Rsid, Gwas_trait, P_value, Gene, Validation, Pubmedid, Chr, Position, Ref, Alt, Variant_type
#' @docType data
data("JnO_GRCh38", envir = environment())
#' ClinVar_GRCh38 Dataset
#'
#' This dataset contains variant information from the ClinVar database.
#'
#' @name ClinVar_GRCh38
#' @format A data frame with columns: Chr, Position, ID, Ref, Alt, QUAL, FILTER, INFO, ALLELEID, Gwas_trait, CLNSIG, CLNVC, Variant_type, P_value, Gene
#' @docType data
data("ClinVar_GRCh38", envir = environment())
# Load necessary libraries
library(dplyr)
# Function to check if variants from the answer file are missing in the DisVar file
check_missing_variants <- function(disvar_file, answer_file, disease_column = "Disease") {
# Read the DisVar file
disvar_data <- read.delim(disvar_file, sep = "\t", stringsAsFactors = FALSE)
# Read the answer file (e.g., coronary_ClinVar.tsv)
answer_data <- read.delim(answer_file, sep = "\t", stringsAsFactors = FALSE)
# Check the column names in both files
cat("DisVar Columns:\n")
print(colnames(disvar_data))
cat("\nAnswer File Columns:\n")
print(colnames(answer_data))
# Adjust column names according to the actual names in your files
disvar_relevant <- disvar_data %>%
select(Chrom, Position, all_of(disease_column)) %>%
mutate(across(everything(), as.character))  # Convert all to character
answer_relevant <- answer_data %>%
select(Chr, Position, Gwas_trait) %>%
mutate(across(everything(), as.character))  # Convert all to character
# Check which variants in the answer file are not in the DisVar file
missing_variants <- anti_join(answer_relevant, disvar_relevant, by = c("Chr" = "Chrom", "Position", "Gwas_trait" = disease_column))
# Count the total variants in DisVar
total_disvar <- nrow(disvar_relevant)
# Count the total variants in the answer file
total_answer_file <- nrow(answer_relevant)
# Count how many variants from the answer file are missing in DisVar
total_missing <- nrow(missing_variants)
# Report the matched variants and counts
cat("\nSummary for database:", answer_file, "\n")
cat("Total variants in DisVar:", total_disvar, "\n")
cat("Total variants in answer file:", total_answer_file, "\n")
cat("Variants matched in DisVar:", total_answer_file - total_missing, "\n")
cat("Variants missing in DisVar:", total_missing, "\n")
if (total_missing == 0) {
cat("All variants from the answer file are present in the DisVar file!\n")
} else {
cat("Some variants from the answer file are missing in the DisVar file.\n")
print(missing_variants)
}
}
check_missing_variants("coronary_disease_deduplicated_DisVar.tsv", "coronary_ClinVar.tsv")
check_missing_variants("coronary_disease_deduplicated_DisVar.tsv", "coronary_JnO.tsv")
check_missing_variants("coronary_disease_deduplicated_DisVar.tsv", "coronary_GWASdb.tsv")
check_missing_variants("coronary_disease_deduplicated_DisVar.tsv", "coronary_GWAS_catalog.tsv")
check_missing_variants("coronary_disease_deduplicated_DisVar.tsv", "coronary_GRASP.tsv")
check_missing_variants("coronary_disease_deduplicated_DisVar.tsv", "coronary_GAD.tsv")
load("~/MSc_Project/DisVar/data/ClinVar_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GAD_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part1.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part2.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part3.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part3.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part4.rda")
load("~/MSc_Project/DisVar/data/GWAS_catalog_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GWASdb_GRCh38.rda")
load("~/MSc_Project/DisVar/data/JnO_GRCh38.rda")
View(ClinVar_GRCh38)
View(GAD_GRCh38)
View(GRASP_GRCh38_part1)
View(GRASP_GRCh38_part2)
View(GRASP_GRCh38_part3)
View(GRASP_GRCh38_part4)
View(GWAS_catalog_GRCh38)
View(GWASdb_GRCh38)
View(GWASdb_GRCh38)
View(JnO_GRCh38)
devtools::document()
library("devtools")
library("usethis")
library("devtools")
devtools::document()
install.packages("xml2")
library(xml2)
devtools::document()
devtools::build()
load("~/MSc_Project/DisVar/data/ClinVar_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GAD_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part1.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part2.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part3.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part4.rda")
load("~/MSc_Project/DisVar/data/GWAS_catalog_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GWASdb_GRCh38.rda")
load("~/MSc_Project/DisVar/data/JnO_GRCh38.rda")
save(ClinVar_GRCh38, file = "data/ClinVar_GRCh38.rda", version = 2)
save(GAD_GRCh38, file = "data/GAD_GRCh38.rda", version = 2)
save(GRASP_GRCh38_part1, file = "data/GRASP_GRCh38_part1.rda", version = 2)
save(GRASP_GRCh38_part2, file = "data/GRASP_GRCh38_part2.rda", version = 2)
save(GRASP_GRCh38_part3, file = "data/GRASP_GRCh38_part3.rda", version = 2)
save(GRASP_GRCh38_part4, file = "data/GRASP_GRCh38_part4.rda", version = 2)
save(GWAS_catalog_GRCh38, file = "data/GWAS_catalog_GRCh38.rda", version = 2)
save(GWASdb_GRCh38, file = "data/GWASdb_GRCh38.rda", version = 2)
save(JnO_GRCh38, file = "data/JnO_GRCh38.rda", version = 2)
R --vanilla
devtools::build()
install.packages("path/to/DisVar_1.2.1.tar.gz", repos = NULL, type = "source")
install.packages("/home/khunanon/MSc_Project/DisVar_1.2.1.tar.gz", repos = NULL, type = "source")
library(DisVar)
devtools::install_github("Khunanon-Chanasongkhram/DisVar")
GRASP_filtered_data <- read_tsv("GRASP_filtered.tsv")
library(readr)
library(dplyr)
GRASP_filtered_data <- read_tsv("GRASP_filtered.tsv")
# Step 2: Ensure and arrange the necessary columns
vcf_data <- GRASP_filtered_data %>%
select(Chr, Position, Rsid, Ref, Alt, Gwas_trait) %>%
mutate(
QUAL = ".",
FILTER = ".",
REF = ".",
ALT = ".",
INFO = paste0("TRAIT=", Gwas_trait)
) %>%
select(
`#CHROM` = Chr,
POS = Position,
ID = Rsid,
QUAL,
FILTER,
INFO
)
# Step 3: Write the VCF header and data
vcf_file <- "GRASP_filtered.vcf"
file_conn <- file(vcf_file, "w")
# Write VCF header lines
writeLines("##fileformat=VCFv4.2", file_conn)
writeLines("##source=DisVar", file_conn)
writeLines("##INFO=<ID=TRAIT,Number=1,Type=String,Description=\"Associated trait or disease\">", file_conn)
writeLines("#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO", file_conn)
# Write VCF data (no column names, no row names, no quotes)
write.table(vcf_data, file = file_conn, sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
# Close the file connection
close(file_conn)
cat("✅ VCF file saved as", vcf_file, "\n")
GWAS_Catalog_filtered_data <- read_tsv("GWAS_Catalog_filtered.tsv")
# Step 2: Ensure and arrange the necessary columns
vcf_data <- GWAS_Catalog_filtered_data %>%
select(Chr, Position, Rsid, Ref, Alt, Gwas_trait) %>%
mutate(
QUAL = ".",
FILTER = ".",
REF = ".",
ALT = ".",
INFO = paste0("TRAIT=", Gwas_trait)
) %>%
select(
`#CHROM` = Chr,
POS = Position,
ID = Rsid,
QUAL,
FILTER,
INFO
)
# Step 3: Write the VCF header and data
vcf_file <- "GWAS_Catalog_filtered.vcf"
file_conn <- file(vcf_file, "w")
# Write VCF header lines
writeLines("##fileformat=VCFv4.2", file_conn)
writeLines("##source=DisVar", file_conn)
writeLines("##INFO=<ID=TRAIT,Number=1,Type=String,Description=\"Associated trait or disease\">", file_conn)
writeLines("#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO", file_conn)
# Write VCF data (no column names, no row names, no quotes)
write.table(vcf_data, file = file_conn, sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
# Close the file connection
close(file_conn)
cat("✅ VCF file saved as", vcf_file, "\n")
load("~/MSc_Project/DisVar/data/ClinVar_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GAD_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part1.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part2.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part3.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part4.rda")
load("~/MSc_Project/DisVar/data/GWAS_catalog_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GWASdb_GRCh38.rda")
load("~/MSc_Project/DisVar/data/JnO_GRCh38.rda")
DisVar("HG00099.variant.vcf")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part1.rda")
View(GRASP_GRCh38_part1)
load("~/MSc_Project/DisVar/data/ClinVar_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GAD_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part2.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part3.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part4.rda")
load("~/MSc_Project/DisVar/data/GWAS_catalog_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GWASdb_GRCh38.rda")
load("~/MSc_Project/DisVar/data/JnO_GRCh38.rda")
View(ClinVar_GRCh38)
View(GAD_GRCh38)
View(GWAS_catalog_GRCh38)
View(GWASdb_GRCh38)
View(JnO_GRCh38)
View(GRASP_GRCh38_part1)
colnames(GRASP_GRCh38_part1)[colnames(GRASP_GRCh38_part1) == "Chr_38"] <- "Chr"
colnames(GRASP_GRCh38_part1)[colnames(GRASP_GRCh38_part1) == "Position_38"] <- "Position"
colnames(GRASP_GRCh38_part2)[colnames(GRASP_GRCh38_part2) == "Chr_38"] <- "Chr"
colnames(GRASP_GRCh38_part2)[colnames(GRASP_GRCh38_part2) == "Position_38"] <- "Position"
colnames(GRASP_GRCh38_part3)[colnames(GRASP_GRCh38_part3) == "Chr_38"] <- "Chr"
colnames(GRASP_GRCh38_part3)[colnames(GRASP_GRCh38_part3) == "Position_38"] <- "Position"
colnames(GRASP_GRCh38_part4)[colnames(GRASP_GRCh38_part4) == "Chr_38"] <- "Chr"
colnames(GRASP_GRCh38_part4)[colnames(GRASP_GRCh38_part4) == "Position_38"] <- "Position"
save(ClinVar_GRCh38, file = "ClinVar_GRCh38.rda", version = 3)
save(ClinVar_GRCh38, file = "data/ClinVar_GRCh38.rda", version = 3)
save(GAD_GRCh38, file = "data/GAD_GRCh38.rda", version = 3)
save(GRASP_GRCh38_part1, file = "data/GRASP_GRCh38_part1.rda", version = 3)
save(GRASP_GRCh38_part2, file = "data/GRASP_GRCh38_part2.rda", version = 3)
save(GRASP_GRCh38_part3, file = "data/GRASP_GRCh38_part3.rda", version = 3)
save(GRASP_GRCh38_part4, file = "data/GRASP_GRCh38_part4.rda", version = 3)
save(GWAS_catalog_GRCh38, file = "data/GWAS_catalog_GRCh38.rda", version = 3)
save(GWASdb_GRCh38, file = "data/GWASdb_GRCh38.rda", version = 3)
save(JnO_GRCh38, file = "data/JnO_GRCh38.rda", version = 3)
DisVar("HG00099.variant.vcf")
devtools::document()
devtools::build()
load("~/MSc_Project/DisVar/data/ClinVar_GRCh38.rda")
View(ClinVar_GRCh38)
ClinVar_GRCh38$Gwas_trait <- iconv(
ClinVar_GRCh38$Gwas_trait,
from = "UTF-8",
to = "ASCII//TRANSLIT"
)
load("~/MSc_Project/DisVar/data/GAD_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part1.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part2.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part3.rda")
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part4.rda")
load("~/MSc_Project/DisVar/data/GWAS_catalog_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GWASdb_GRCh38.rda")
load("~/MSc_Project/DisVar/data/JnO_GRCh38.rda")
View(GAD_GRCh38)
ClinVar_GRCh38$Gwas_trait <- iconv(
ClinVar_GRCh38$Gwas_trait,
from = "UTF-8",
to = "ASCII//TRANSLIT"
)
GAD_GRCh38$Gwas_trait <- iconv(
GAD_GRCh38$Gwas_trait,
from = "UTF-8",
to = "ASCII//TRANSLIT"
)
GRASP_GRCh38_part1$Gwas_trait <- iconv(
GRASP_GRCh38_part1$Gwas_trait,
from = "UTF-8",
to = "ASCII//TRANSLIT"
)
GRASP_GRCh38_part2$Gwas_trait <- iconv(
GRASP_GRCh38_part2$Gwas_trait,
from = "UTF-8",
to = "ASCII//TRANSLIT"
)
GRASP_GRCh38_part3$Gwas_trait <- iconv(
GRASP_GRCh38_part3$Gwas_trait,
from = "UTF-8",
to = "ASCII//TRANSLIT"
)
GRASP_GRCh38_part4$Gwas_trait <- iconv(
GRASP_GRCh38_part4$Gwas_trait,
from = "UTF-8",
to = "ASCII//TRANSLIT"
)
GWAS_catalog_GRCh38$Gwas_trait <- iconv(
GWAS_catalog_GRCh38$Gwas_trait,
from = "UTF-8",
to = "ASCII//TRANSLIT"
)
GWASdb_GRCh38$Gwas_trait <- iconv(
GWASdb_GRCh38$Gwas_trait,
from = "UTF-8",
to = "ASCII//TRANSLIT"
)
JnO_GRCh38$Gwas_trait <- iconv(
JnO_GRCh38$Gwas_trait,
from = "UTF-8",
to = "ASCII//TRANSLIT"
)
View(GAD_GRCh38)
View(GRASP_GRCh38_part1)
save(ClinVar_GRCh38, file = "data/ClinVar_GRCh38.rda", version = 3)
save(GAD_GRCh38, file = "data/GAD_GRCh38.rda", version = 3)
save(GRASP_GRCh38_part1, file = "data/GRASP_GRCh38_part1.rda", version = 3)
save(GRASP_GRCh38_part2, file = "data/GRASP_GRCh38_part2.rda", version = 3)
save(GRASP_GRCh38_part3, file = "data/GRASP_GRCh38_part3.rda", version = 3)
save(GRASP_GRCh38_part4, file = "data/GRASP_GRCh38_part4.rda", version = 3)
save(GWAS_catalog_GRCh38, file = "data/GWAS_catalog_GRCh38.rda", version = 3)
save(GWASdb_GRCh38, file = "data/GWASdb_GRCh38.rda", version = 3)
save(JnO_GRCh38, file = "data/JnO_GRCh38.rda", version = 3)
load("~/MSc_Project/DisVar/data/ClinVar_GRCh38.rda")
View(ClinVar_GRCh38)
load("~/MSc_Project/DisVar/data/ClinVar_GRCh38.rda")
View(ClinVar_GRCh38)
load("~/MSc_Project/DisVar/data/GAD_GRCh38.rda")
View(GAD_GRCh38)
load("~/MSc_Project/DisVar/data/GRASP_GRCh38_part1.rda")
View(GRASP_GRCh38_part1)
load("~/MSc_Project/DisVar/data/JnO_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GWAS_catalog_GRCh38.rda")
load("~/MSc_Project/DisVar/data/GWASdb_GRCh38.rda")
View(GWAS_catalog_GRCh38)
View(GWASdb_GRCh38)
View(JnO_GRCh38)
load("~/MSc_Project/DisVar/data/GAD_GRCh38.rda")
View(GAD_GRCh38)
typeof(GAD_GRCh38)
class(GAD_GRCh38$Chr)
load("~/MSc_Project/DisVar/data/ClinVar_GRCh38.rda")
View(ClinVar_GRCh38)
class(ClinVar_GRCh38$Chr)
View(GAD_GRCh38)
DisVar("file_name.vcf")
DisVar("HG00099.variant.vcf.gz")
DisVar("HG00099.vcf.gz")
DisVar("HG00099.variant.vcf.gz")
file = "HG00099.variant.vcf.gz"
runOnShiny = FALSE
if (!runOnShiny && (!file.exists(file) || !grepl("\\.vcf(\\.gz)?$", file, ignore.case = TRUE))) {
stop("A valid VCF file (.vcf or .vcf.gz) is required.")
}
file.exists("HG00099.variant.vcf.gz")
file.exists("HG00099.variant.vcf")
file.exists("HG00099.vcf.gz")
file = "HG00099.vcf.gz"
if (!runOnShiny && (!file.exists(file) || !grepl("\\.vcf(\\.gz)?$", file, ignore.case = TRUE))) {
stop("A valid VCF file (.vcf or .vcf.gz) is required.")
}
DisVar("HG00099.vcf.gz")
DisVar("HG00099.vcf")
DisVar("HG00099.vcf.gz")
DisVar("HG00099.vcf")
